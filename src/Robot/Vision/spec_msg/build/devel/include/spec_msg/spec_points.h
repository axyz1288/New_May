// Generated by gencpp from file spec_msg/spec_points.msg
// DO NOT EDIT!


#ifndef SPEC_MSG_MESSAGE_SPEC_POINTS_H
#define SPEC_MSG_MESSAGE_SPEC_POINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace spec_msg
{
template <class ContainerAllocator>
struct spec_points_
{
  typedef spec_points_<ContainerAllocator> Type;

  spec_points_()
    : points_xyz()
    , points_rgb()
    , flag(0)  {
    }
  spec_points_(const ContainerAllocator& _alloc)
    : points_xyz(_alloc)
    , points_rgb(_alloc)
    , flag(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _points_xyz_type;
  _points_xyz_type points_xyz;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _points_rgb_type;
  _points_rgb_type points_rgb;

   typedef uint8_t _flag_type;
  _flag_type flag;





  typedef boost::shared_ptr< ::spec_msg::spec_points_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spec_msg::spec_points_<ContainerAllocator> const> ConstPtr;

}; // struct spec_points_

typedef ::spec_msg::spec_points_<std::allocator<void> > spec_points;

typedef boost::shared_ptr< ::spec_msg::spec_points > spec_pointsPtr;
typedef boost::shared_ptr< ::spec_msg::spec_points const> spec_pointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spec_msg::spec_points_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spec_msg::spec_points_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace spec_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'spec_msg': ['/home/aiRobots/New_May/src/Robot/Vision/spec_msg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::spec_msg::spec_points_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spec_msg::spec_points_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spec_msg::spec_points_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spec_msg::spec_points_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spec_msg::spec_points_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spec_msg::spec_points_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spec_msg::spec_points_<ContainerAllocator> >
{
  static const char* value()
  {
    return "79d933304dd1e2e99143191e2b7c8435";
  }

  static const char* value(const ::spec_msg::spec_points_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x79d933304dd1e2e9ULL;
  static const uint64_t static_value2 = 0x9143191e2b7c8435ULL;
};

template<class ContainerAllocator>
struct DataType< ::spec_msg::spec_points_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spec_msg/spec_points";
  }

  static const char* value(const ::spec_msg::spec_points_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spec_msg::spec_points_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[] points_xyz\n\
geometry_msgs/Point[] points_rgb\n\
uint8 flag\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::spec_msg::spec_points_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spec_msg::spec_points_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.points_xyz);
      stream.next(m.points_rgb);
      stream.next(m.flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct spec_points_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spec_msg::spec_points_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spec_msg::spec_points_<ContainerAllocator>& v)
  {
    s << indent << "points_xyz[]" << std::endl;
    for (size_t i = 0; i < v.points_xyz.size(); ++i)
    {
      s << indent << "  points_xyz[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points_xyz[i]);
    }
    s << indent << "points_rgb[]" << std::endl;
    for (size_t i = 0; i < v.points_rgb.size(); ++i)
    {
      s << indent << "  points_rgb[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points_rgb[i]);
    }
    s << indent << "flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPEC_MSG_MESSAGE_SPEC_POINTS_H
